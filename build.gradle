plugins {
    //第一和第二个plugin 版本要对应.对应完下面 org.springframework.boot 不用输入版本号
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
}

/*
在 Gradle 构建项目时，`compileOnly { extendsFrom annotationProcessor }` 主要作用是将编译时注解处理器（Annnotation Processor）与编译后的类分离，使得它们能够独立发布和使用。

一般情况下，开发者需要将注解处理器和依赖于它的编译期代码一同作为依赖项加入到 Gradle build 中，如下所示：

```gradle
dependencies {
    compile "some-library:1.0"
    annotationProcessor "some-annotation-processor:1.0"
}
```

这样做在编译和打包时会将注解处理器的 JAR 包放入编译路径中，增加开发者项目的大小和依赖项数量。而采用 `compileOnly { extendsFrom annotationProcessor }` 就可以解决这个问题。

具体实现时，`compileOnly { extendsFrom annotationProcessor }` 可以将注解处理器作为编译时类路径中可引用的编译期依赖项，在打包时不作为传递依赖项进行打包。也就是说，注解处理器和依赖于它的编译期代码可以脱离构建环境独立使用。

在使用 `compileOnly { extendsFrom annotationProcessor }` 的情况下，开发者需要在代码中显式引用注解处理器，例如使用 `Processor` 注解指定注解处理器，示例代码如下：

```java
@Processor(MyProcessor.class)
public class MyClass {}
```

需要注意的是，使用 `compileOnly { extendsFrom annotationProcessor }` 除了可以减少依赖项数量和大幅缩小发布包的大小之外，也会增加编译期的负荷，因为每次编译都需要重新执行注解处理器。因此，如果注解处理器的执行时间较长或者被多次引用的话，建议直接将注解处理器加入普通的compile或implementation依赖项中。*/
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
//指定仓库
repositories {
    // 本地
    mavenLocal()
    // 阿里云
    maven {
        url 'https://maven.aliyun.com/repository/public'
    }
    maven {
        url 'https://maven.aliyun.com/repository/gradle-plugin'
    }
}

//所有项目的设置,就不用每个子模块设置
allprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    group = 'tech.burny.cloud'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    //打包去掉的文件
    bootJar {
        exclude("application.yml")
    }

}
//子模块设置
subprojects {

    repositories {
        // 本地
        mavenLocal()
        // 阿里云
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/gradle-plugin'
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.0.5.0'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:2021.0.5.0'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

}


